beta <- c(beta, rep(1 * decay^(k-1), ncol(interactions)))
}
# apply transform
transformed_X <- transform(X_interact %*% beta)
# draw y
y.rec <- katlabutils::generate_glm_response_data(
transformed_X,
amplitude,
family
)
y <- y.rec[1:n]
}
X.rec <- NULL
if (is.null(X.rec)) {
X.rec <- X
}
y.rec <- katlabutils::generate_glm_response_data(
X.rec,
beta,
family
)
y <- y.rec[1:n]
data <- list(X = X, y = y, X.rec = X.rec, y.rec = y.rec, tree = tree,
nonnulls = nonnulls, data_gen_args = data_gen_args)
# get the list of arguments
data_gen_args <- as.list(environment())
data <- list(X = X, y = y, X.rec = X.rec, y.rec = y.rec, tree = tree,
nonnulls = nonnulls, data_gen_args = data_gen_args)
View(data)
load_all(
)
simurg.data <- generate_data(n, p, joint_X, y_given_X, X_hyperparams,
y_given_X_hyperparams, amplitude, ground_truth)
View(simurg.data)
# try treeWAS
treeWAS.inf <- treeWAS_wrapper(simurg.data, method = "terminal")
View(simurg.data)
simurg.data$X
rownames(simurg.data)
rownames(simurg.data$X)
load_all()
names(simurg.data$y) <- rownames(simurg.data$X)
# try treeWAS
treeWAS.inf <- treeWAS_wrapper(simurg.data, method = "terminal")
View(treeWAS.inf)
nonnulls <- ground_truth$nonnulls
View(treeWAS.inf)
treeWAS.inf$terminal$p.vals
load_all()
hogwash.inf <- hogwash_wrapper(simurg.data)
load_all()
hogwash.inf <- hogwash_wrapper(simurg.data)
args(hogwash::hogwash)
View(simurg.data)
load_all()
hogwash.inf <- hogwash_wrapper(simurg.data)
load_all()
hogwash.inf <- hogwash_wrapper(simurg.data)
View(simurg.data)
load_all()
hogwash.inf <- hogwash_wrapper(simurg.data)
load_all()
hogwash.inf <- hogwash_wrapper(simurg.data)
hogwash::hogwash
View(simurg.data)
ape::tree
hogwash:::check_input_format
look <- hogwash::tree
View(look)
View(sim.data)
View(simurg.data)
View(look)
look$node.label
load_all()
simurg.data <- generate_data(n, p, joint_X, y_given_X, X_hyperparams,
y_given_X_hyperparams, amplitude, ground_truth)
hogwash.inf <- hogwash_wrapper(simurg.data)
data <- simurg.data
snps <- data$X
phen <- data$y
rownames(snps)
names(phen)
names(phen) <- rownames(snps)
binary <- all(y %in% c(0, 1))
tree <- data$tree
timestamp <- format(Sys.time(), "%Y-%m-%d_%H-%M-%S")
# match names
snps <- snps[tree$tip.label, , drop = FALSE]
phen <- phen[tree$tip.label]
# create directory if it doesn't exist
if (!dir.exists("hogwash")) {
dir.create("hogwash", recursive = TRUE)
}
# make labels
tree$node.label <- rep(100, tree$Nnode)
# run hogwash
hogwash::hogwash(pheno = as.matrix(phen),
geno = as.matrix(snps),
tree = tree,
file_name = timestamp,
dir = "hogwash",
perm = 10000,
fdr = 0.1,
test = "both")
hogwash:::plot_continuous_results
# run hogwash
hogwash::hogwash(pheno = as.matrix(phen),
geno = as.matrix(snps),
tree = tree,
file_name = timestamp,
dir = "hogwash",
perm = 10000,
fdr = 0.1,
grouping_method = "pre_ar",
test = "both")
# run hogwash
hogwash::hogwash(pheno = as.matrix(phen),
geno = as.matrix(snps),
tree = tree,
file_name = timestamp,
dir = "hogwash",
perm = 10000,
fdr = 0.1,
grouping_method = "pre-ar",
test = "both")
# run hogwash
hogwash::hogwash(pheno = as.matrix(phen),
geno = as.matrix(snps),
tree = tree,
file_name = timestamp,
dir = "hogwash",
perm = 10000,
fdr = 0.1,
grouping_method = "pre-ar",
test = "both")
phenotype <- hogwash::growth
#' genotype <- hogwash::snp_genotype
#' tree <- hogwash::tree
#' hogwash(pheno = phenotype,
#'         geno = genotype,
#'         tree = tree)
hogwash::growth
hogwash::snp_genotype
hogwash::hogwash(pheno = phenotype, geno = genotype, tree = tree)
genotype <- hogwash::snp_genotype
tree <- hogwash::tree
hogwash::hogwash(pheno = phenotype, geno = genotype, tree = tree)
phenotype <- hogwash::antibiotic_resistance
genotype <- hogwash::snp_genotype
tree <- hogwash::tree
hogwash::hogwash(pheno = phenotype, geno = genotype, tree = tree)
synchronous <- read.rda(paste0("hogwash/hogwash_synchronous_hogwash.rda"))
load(paste0("hogwash/hogwash_synchronous_hogwash.rda"))
synchronous <- load(paste0("hogwash/hogwash_synchronous_hogwash.rda"))
View(hogwash_synchronous)
y_given_X_hyperparams <- list(family = "binomial")
simurg.data <- generate_data(n, p, joint_X, y_given_X, X_hyperparams,
y_given_X_hyperparams, amplitude, ground_truth)
hogwash.inf <- hogwash_wrapper(simurg.data)
load_all()
View(simurg.data)
# testing
seed <- 1234
n <- 50
p <- 20
s <- 20
amplitude <- 0.1
# test treeWAS and simurg
joint_X <- "treeWAS"
joint_X <- "simurg"
y_given_X <- "linear"
# simurg X_hyperparams
X_hyperparams <- list(prob.gene.gain = 1e-08, prob.gene.loss = 1e-11, sub.rate = 5e-12)
y_given_X_hyperparams <- list(family = "gaussian")
y_given_X_hyperparams <- list(family = "binomial")
# nonnulls
ground_truth <- list(nonnulls = R.utils::withSeed(sample(p, s), seed = seed))
simurg.data <- generate_data(n, p, joint_X, y_given_X, X_hyperparams,
y_given_X_hyperparams, amplitude, ground_truth)
hogwash.inf <- hogwash_wrapper(simurg.data)
View(simurg.data)
load("~/code/mGWAS/hogwash/hogwash_synchronous_2025-09-26_18-34-29.rda")
synchronous <- paste0("hogwash/hogwash_synchronous_", timestamp, ".rda")
synchronous <- get(paste0("hogwash/hogwash_synchronous_", timestamp))
timestamp
timestamp <- "2025-09-26_18-34-29"
synchronous <- get(paste0("hogwash/hogwash_synchronous_", timestamp))
synchronous <- get(paste0("hogwash/hogwash_synchronous_", timestamp), ".rda")
synchronous <- get(paste0("hogwash/hogwash_synchronous_", timestamp, ".rda"))
View(hogwash_synchronous)
synchronous <- hogwash_synchronous
data <- simurg.data
X <- data$X
y <- data$y
n <- length(y)
tree <- data$tree
method <- "fixed"
tmpdir = "pyseer_temp"
# make sure temp directory exists
if (!dir.exists(tmpdir)) {
dir.create(tmpdir, recursive = TRUE)
}
# sample names check
if (is.null(rownames(X))) rownames(X) <- paste0("sample_", seq(1:n))
if (is.null(names(y))) rownames(X)
if (!all(names(y) %in% rownames(X))) {
stop("Sample names in y must match rownames of X")
}
samples <- names(y)
hogwash::hogwash
hogwash::check_input_format
hogwash:::check_input_format
load_all()
load_all()
View(simurg.data)
hogwash.inf <- hogwash_wrapper(simurg.data)
View(hogwash.inf)
load_all()
hogwash.inf <- hogwash_wrapper(simurg.data)
View(hogwash.inf)
load_all()
hogwash.inf <- hogwash_wrapper(simurg.data)
View(hogwash.inf)
hogwash.inf <- hogwash_wrapper(simurg.data, method = "phyc")
exp(hogwash.inf$raw_pvals)
exp(-hogwash.inf$raw_pvals)
rownames(X)
names(y)
getwd()
# make phenotype file
pheno_file <- file.path(tmpdir, "phenotypes.txt")
pheno_df <- data.frame(sample = samples, phenotype = y[samples],
stringsAsFactors = FALSE)
write.table(pheno_df, pheno_file, sep = "\t", quote = FALSE,
row.names = FALSE, col.names = TRUE)
# make genotype file
geno_file <- file.path(tmpdir, "variants.pres.tsv")
mat <- t(X[samples, , drop = FALSE])
geno_out <- data.frame(variant = rownames(mat), mat, check.names = FALSE)
write.table(geno_out, geno_file, sep = "\t", quote = FALSE,
row.names = FALSE, col.names = TRUE)
# distances / similarities from tree
dist_file <- sim_file <- NULL
tr <- if (file.exists(tree)) ape::read.tree(tree) else ape::read.tree(text = tree)
tr <- ape::read.tree(text = tree)
tr <- ape::keep.tip(tree, samples)
D <- ape::cophenetic.phylo(tr)[samples, samples]
View(D)
dist_file <- file.path(tmpdir, "distances.txt")
write.table(D, dist_file, sep = "\t", quote = FALSE,
row.names = TRUE, col.names = TRUE)
# make pyseer command
cmd <- c("pyseer",
paste0("--phenotypes ", pheno_file),
paste0("--pres ", geno_file),
paste0("--output-pattern ", file.path(tmpdir, output)))
if (!is.null(dist_file))  cmd <- c(cmd, paste0("--distances ", dist_file))
if (!is.null(sim_file))   cmd <- c(cmd, paste0("--similarities ", sim_file), "--lmm")
if (!is.null(extra_args)) cmd <- c(cmd, extra_args)
extra_args
cmd
cmd_str <- paste(cmd, collapse = " ")
message("Running: ", cmd_str)
system(cmd_str)
# prepend conda run
full_cmd <- paste("conda run -n pyseer", cmd_str)
message("Running: ", full_cmd)
system(full_cmd)
# prepend conda run
# full command using conda run inside bash
full_cmd <- paste(
"bash -c '",
"conda run -n pyseer",
cmd_str,
"'"
)
message("Running: ", full_cmd)
system(full_cmd)
# prepend conda run
conda_bin <- "/Users/jeffreyzhang/miniconda3/bin/conda"
full_cmd <- paste(conda_bin, "run -n pyseer", cmd_str)
message("Running: ", full_cmd)
system(full_cmd)
message("Running: ", full_cmd)
system(full_cmd)
# prepend conda run
full_cmd <- paste(conda_bin, "run -n pyseer", cmd_str)
message("Running: ", full_cmd)
system(full_cmd)
pyseer_env <- "pyseer_x86"
# prepend conda run
full_cmd <- paste(conda_bin, "run -n", pyseer_env, cmd_str)
message("Running: ", full_cmd)
system(full_cmd)
# get results
res <- read.table(file.path(tmpdir, output), header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(res)
# make pyseer command
cmd <- c("pyseer",
paste0("--phenotypes ", pheno_file),
paste0("--pres ", geno_file))
if (!is.null(dist_file))  cmd <- c(cmd, paste0("--distances ", dist_file))
if (!is.null(sim_file))   cmd <- c(cmd, paste0("--similarities ", sim_file), "--lmm")
cmd_str <- paste(cmd, collapse = " ")
# prepend conda run
full_cmd <- paste(conda_bin, "run -n", pyseer_env, cmd_str,
paste0("> ", file.path(tmpdir, output)))
full_cmd
message("Running: ", full_cmd)
system(full_cmd)
# get results
res <- read.table(file.path(tmpdir, output), header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(res)
hist(res$lrt.pvalue)
hist(res$lrt.pvalue, breaks = 50)
res$lrt.pvalue
min(res$lrt.pvalue)
# test treeWAS and simurg
joint_X <- "treeWAS"
y_given_X <- "linear"
# treeWAS X_hyperparams
X_hyperparams <- list(assoc.prob = 90, n.snps.assoc = s, set = 3)
y_given_X_hyperparams <- list(family = "binomial")
# nonnulls
ground_truth <- list(nonnulls = R.utils::withSeed(sample(p, s), seed = seed))
treeWAS.data <- generate_data(n, p, joint_X, y_given_X, X_hyperparams,
y_given_X_hyperparams, amplitude, ground_truth)
n <- 50
p <- 50
s <- 20
amplitude <- 0.1
# test treeWAS and simurg
joint_X <- "treeWAS"
y_given_X <- "linear"
# treeWAS X_hyperparams
X_hyperparams <- list(assoc.prob = 90, n.snps.assoc = s, set = 3)
y_given_X_hyperparams <- list(family = "gaussian")
y_given_X_hyperparams <- list(family = "binomial")
# nonnulls
ground_truth <- list(nonnulls = R.utils::withSeed(sample(p, s), seed = seed))
treeWAS.data <- generate_data(n, p, joint_X, y_given_X, X_hyperparams,
y_given_X_hyperparams, amplitude, ground_truth)
conda_bin
pyseer_env
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "fixed", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
load_all()
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "fixed", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
method <- match.arg(method)
load_all()
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "fixed", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
View(pyseer.inf)
hogwash.inf <- hogwash_wrapper(treeWAS.data, method = "phyc")
data <- treeWAS.data
snps <- data$X
phen <- data$y
binary <- all(y %in% c(0, 1))
tree <- data$tree
timestamp <- format(Sys.time(), "%Y-%m-%d_%H-%M-%S")
# match names
snps <- snps[tree$tip.label, , drop = FALSE]
phen <- phen[tree$tip.label]
# make labels
tree$node.label <- rep(100, tree$Nnode)
hogwash::hogwash(pheno = as.matrix(phen),
geno = as.matrix(snps),
tree = tree,
file_name = timestamp,
dir = "hogwash",
perm = 10000,
bootstrap = 0.3,
fdr = 0.1,
test = "phyc")
load(paste0("hogwash/hogwash_phyc_", timestamp, ".rda"))
convergence <- hogwash_phyc
unlink(paste0("hogwash/hogwash_phyc_", timestamp, "*"), recursive = TRUE)
View(convergence)
convergence$raw_pvals$neg_log_unadjusted_pvals
exp(-convergence$raw_pvals$neg_log_unadjusted_pvals)
load_all()
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "fixed", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
View(pyseer.inf)
n <- 100
p <- 500
s <- 20
amplitude <- 0.1
# test treeWAS and simurg
joint_X <- "treeWAS"
y_given_X <- "linear"
# treeWAS X_hyperparams
X_hyperparams <- list(assoc.prob = 90, n.snps.assoc = s, set = 3)
y_given_X_hyperparams <- list(family = "gaussian")
y_given_X_hyperparams <- list(family = "binomial")
# nonnulls
ground_truth <- list(nonnulls = R.utils::withSeed(sample(p, s), seed = seed))
treeWAS.data <- generate_data(n, p, joint_X, y_given_X, X_hyperparams,
y_given_X_hyperparams, amplitude, ground_truth)
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "fixed", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
View(pyseer.inf)
hist(pyseer.inf$lrt.pvalue)
pyseer.inf$lrt.pvalue
class((pyseer.inf$lrt.pvalue))
hist(pyseer.inf$lrt.pvalue, breaks = 50)
amplitude <- 0.25
treeWAS.data <- generate_data(n, p, joint_X, y_given_X, X_hyperparams,
y_given_X_hyperparams, amplitude, ground_truth)
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "fixed", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
View(pyseer.inf)
p.adjust(pyseer.inf$lrt.pvalue, alpha = 0.1)
p.adjust(pyseer.inf$lrt.pvalue, alpha = 0.1, method = "BH")
p.adjust(pyseer.inf$lrt.pvalue, method = "BH")
which(p.adjust(pyseer.inf$lrt.pvalue, method = "BH") < 0.1)
pyseer.inf$variant[which(p.adjust(pyseer.inf$lrt.pvalue, method = "BH") < 0.1)]
data_gen_args$nonnulls
sort(data_gen_args$nonnulls)
ground_truth$nonnulls
sort(ground_truth$nonnulls)
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "mixed", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
load_all()
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "mixed", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
load_all()
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "mixed", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
View(pyseer.inf)
View(data)
cor(data$X)
load_all()
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "elasticnet", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
View(pyseer.inf)
ground_truth$nonnulls
sort(ground_truth$nonnulls)
n <- 200
p <- 5000
s <- 20
amplitude <- 0.25
# test treeWAS and simurg
joint_X <- "treeWAS"
y_given_X <- "linear"
# treeWAS X_hyperparams
X_hyperparams <- list(assoc.prob = 90, n.snps.assoc = s, set = 3)
y_given_X_hyperparams <- list(family = "gaussian")
y_given_X_hyperparams <- list(family = "gaussian")
y_given_X_hyperparams <- list(family = "binomial")
# nonnulls
ground_truth <- list(nonnulls = R.utils::withSeed(sample(p, s), seed = seed))
treeWAS.data <- generate_data(n, p, joint_X, y_given_X, X_hyperparams,
y_given_X_hyperparams, amplitude, ground_truth)
# try methods
treeWAS.inf <- treeWAS_wrapper(treeWAS.data, method = "terminal")
View(treeWAS.inf)
hogwash.inf <- hogwash_wrapper(treeWAS.data, method = "phyc")
pyseer.inf <- pyseer_wrapper(treeWAS.data, method = "elasticnet", tmpdir = "pyseer_temp",
output = "pyseer_out.txt",
conda_bin = "/Users/jeffreyzhang/miniconda3/bin/conda",
pyseer_env = "pyseer_x86",
extra_args = NULL,
keep_files = FALSE)
View(pyseer.inf)
ground_truth$nonnulls
View(pyseer.inf)
conda_bin
document()
full_cmd
file.path(tmpdir, timestamp)
