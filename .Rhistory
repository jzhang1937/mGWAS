renv::init()
renv::install("treeWAS")
renv:install("caitiecollins/treeWAS")
renv::install("caitiecollins/treeWAS")
library(treeWAS)
renv::install("Rcpp")
renv::install("RcppArmadillo")
renv::install("RcppArmadillo",  type = "source", clean = TRUE)
renv::install("RcppArmadillo")
getwd()
mkdir -p .R
renv::install("RcppArmadillo")
renv::install("RcppArmadillo")
file.path(R.home("etc"), "Makeconf")
renv::install("RcppArmadillo")
renv::cache$remove("RcppArmadillo")
renv::cache
library(renv)
renv::cache$remove("RcppArmadillo")
renv::install("RcppArmadillo")
renv::install("RcppArmadillo")
sessionInfo()
renv::install("RcppArmadillo")
sessionInfo()
Sys.getenv(c("LDFLAGS", "CPPFLAGS"))
cat(.R/Makevars)
renv::install("RcppArmadillo")
Sys.getenv("R_MAKEVARS_USER")
system("cat Makeconf.project")
renv::install("RcppArmadillo")
system("cat Makeconf.project")
Sys.getenv("R_MAKEVARS_USER")
renv::install("RcppArmadillo")
renv::install("RcppArmadillo")
renv::install("RcppArmadillo")
Sys.getenv("R_MAKEVARS_USER")
# Should return: "Makeconf.project"
readLines(file.path(".R", "Makeconf.project"))
# Should show your custom FLIBS line
Sys.getenv("R_MAKEVARS_USER")
Sys.getenv("R_MAKEVARS_USER")
Sys.getenv("R_MAKEVARS_USER")
renv::install("RcppArmadillo")
Sys.getenv(c("LDFLAGS", "CPPFLAGS", "R_MAKEVARS_USER"))
renv::install("RcppArmadillo")
?treeWAS
library(treeWAS)
treeWAS::coalescent.sim
treeWAS::gen.root
treeWAS:::gen.root
treeWAS:::.get.locus
iter <- 100
n.ind <- 80
n.snps <- 1000
n.snps.assoc <- 80
assoc.prob <- 90
# generate tree
tree <- treeWAS::coalescent.sim(n.ind = n.ind, n.snps = n.snps,
n.snps.assoc = n.snps.assoc,
assoc.prob = assoc.prob)
View(tree)
# perform tests
tests <- treeWAS(snps = tree$snps, phen = tree$phen,
test = test.names)
test.names <- c("terminal", "simultaneous", "subsequent", "cor", "fisher")
# perform tests
tests <- treeWAS(snps = tree$snps, phen = tree$phen,
test = test.names, plot.tree = FALSE,
plot.null.dist.pairs = FALSE)
View(tests)
tree$snps.assoc
p.adjust(tests$terminal$p.vals, method = "BH")
which(p.adjust(tests$terminal$p.vals, method = "BH") < 0.01)
unique(which(p.adjust(tests$terminal$p.vals, method = "BH") < 0.01))
tree$snps.assoc
sum(unique(which(p.adjust(tests$terminal$p.vals, method = "BH") < 0.01)) %in% tree$snps.assoc)
length(unique(which(p.adjust(tests$terminal$p.vals, method = "BH") < 0.01)))
unique(which(p.adjust(tests$simultaneous$p.vals, method = "BH") < 0.01))
length(unique(which(p.adjust(tests$simultaneous$p.vals, method = "BH") < 0.01)))
length(unique(which(p.adjust(tests$subsequent$p.vals, method = "BH") < 0.01)))
sum(unique(which(p.adjust(tests$subsequent$p.vals, method = "BH") < 0.01)) %in% tree$snps.assoc)
sum(unique(which(p.adjust(tests$simultaneous$p.vals, method = "BH") < 0.01)) %in% tree$snps.assoc)
assoc.prob <- 80
test.names <- c("terminal", "simultaneous", "subsequent", "cor", "fisher")
# generate tree
tree <- treeWAS::coalescent.sim(n.ind = n.ind, n.snps = n.snps,
n.snps.assoc = n.snps.assoc,
assoc.prob = assoc.prob)
# perform tests
tests <- treeWAS(snps = tree$snps, phen = tree$phen,
test = test.names, plot.tree = FALSE,
plot.null.dist.pairs = FALSE)
View(tests)
treeWAS
View(tests)
tests$terminal$p.vals
tests$terminal$p.vals < 0.01
sum(tests$terminal$p.vals < 0.01)
sum(tests$simultaneous$p.vals < 0.01)
p.adjust(sum(tests$simultaneous$p.vals), method = "BH")
p.adjust(tests$simultaneous$p.vals, method = "BH")
which(p.adjust(tests$simultaneous$p.vals, method = "BH") < 0.01)
look <- p.adjust(tests$simultaneous$p.vals, method = "BH")
p.adjust
test$terminal
tests$terminal$corr.dat
tests$terminal$corr.sim
tests$terminal$corr.sim[1001:2000]
sum(test$terminal$corr.dat[1] > tests$terminal$corr.sim)
sum(tests$terminal$corr.dat[1] > tests$terminal$corr.sim)
sum(tests$terminal$corr.dat[2] > tests$terminal$corr.sim)
sum(abs*tests$terminal$corr.dat[2]) > abs(tests$terminal$corr.sim))
sum(abs(tests$terminal$corr.dat[2]) > abs(tests$terminal$corr.sim))
sum(abs(tests$terminal$corr.dat[1]) > abs(tests$terminal$corr.sim))
p.adjust(tests$terminal$p.vals, method="fdr")
p.adjust(tests$terminal$p.vals, method="fdr",n = length(tests$terminal$p.vals) * 5)
# generate tree
tree <- treeWAS::coalescent.sim(n.ind = n.ind, n.snps = n.snps,
n.snps.assoc = n.snps.assoc,
assoc.prob = assoc.prob)
# perform tests
tests <- treeWAS(snps = tree$snps, phen = tree$phen,
test = test.names, plot.tree = FALSE,
plot.null.dist.pairs = FALSE,
p.value.correct = "fdr",
p.value.by = "count"
)
8200/10001
8212/10001
tests$terminal$min.p.value
tests$terminal$p.vals
tests$terminal$p.vals[1]
tests$terminal$p.vals[2]
tests$terminal$p.vals[3]
sum(abs(tests$terminal$corr.dat[2]) >= abs(tests$terminal$corr.sim))
abs(tests$terminal$corr.sim)
sum(abs(tests$terminal$corr.dat[2]) >= abs(tests$terminal$corr.sim))
sum(abs(tests$terminal$corr.dat[1]) >= abs(tests$terminal$corr.sim))
p.adjust(tests$terminal$p.vals, method = "fdr")
which(p.adjust(tests$terminal$p.vals, method = "fdr") < 0.05)
which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.05)
tests$simultaneous$p.vals
p.adjust(tests$terminal$p.vals, method = "fdr")
length(p.adjust(tests$terminal$p.vals, method = "fdr"))
which(length(p.adjust(tests$terminal$p.vals, method = "fdr")))
which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.05)
View(tree)
snps.assoc
tree$snps.assoc
unique(which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.05))
unique(which(p.adjust(tests$cor$p.vals, method = "fdr") < 0.05))
unique(which(p.adjust(tests$fisher$p.vals, method = "fdr") < 0.05))
unique(which(p.adjust(tests$fisher$p.vals, method = "fdr") < 0.1))
treeWAS::coalescent.sim
iter <- 100
n.ind <- 100
n.snps <- 1000
n.snps.assoc <- 400
assoc.prob <- 60
# generate tree
tree <- treeWAS::coalescent.sim(n.ind = n.ind, n.snps = n.snps,
n.snps.assoc = n.snps.assoc,
assoc.prob = assoc.prob)
# perform tests
tests <- treeWAS(snps = tree$snps, phen = tree$phen,
test = test.names, plot.tree = FALSE,
plot.null.dist.pairs = FALSE,
p.value.correct = "fdr",
p.value.by = "count"
)
unique(which(p.adjust(tests$cor$p.vals, method = "fdr") < 0.05))
unique(which(p.adjust(tests$cor$p.vals, method = "fdr") < 0.1))
unique(which(p.adjust(tests$cor$p.vals, method = "fdr") < 0.2))
unique(which(p.adjust(tests$cor$p.vals, method = "fdr") < 0.15))
unique(which(p.adjust(tests$fisher$p.vals, method = "fdr") < 0.15))
unique(which(p.adjust(tests$terminal$p.vals, method = "fdr") < 0.15))
unique(which(p.adjust(tests$subsequent$p.vals, method = "fdr") < 0.15))
unique(which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.15))
tree$snps.assoc
selected <- unique(which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.15))
nonnulls <- tree$snps.assoc
setdiff(selected, nonnulls)
length(setdiff(selected, nonnulls)) / length(selected)
selected <- unique(which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.1))
length(setdiff(selected, nonnulls)) / length(selected)
selected <- unique(which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.01))
length(setdiff(selected, nonnulls)) / length(selected)
selected
length(setdiff(selected, nonnulls)) / length(selected)
selected <- unique(which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.1))
length(setdiff(selected, nonnulls)) / length(selected)
selected <- unique(which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.9))
length(setdiff(selected, nonnulls)) / length(selected)
selected <- unique(which(p.adjust(tests$simultaneous$p.vals, method = "fdr") < 0.09))
length(setdiff(selected, nonnulls)) / length(selected)
selected <- unique(which(p.adjust(tests$fisher$p.vals, method = "fdr") < 0.1))
length(setdiff(selected, nonnulls)) / length(selected)
selected
selected <- unique(which(p.adjust(tests$cor$p.vals, method = "fdr") < 0.1))
selected
selected <- unique(which(p.adjust(tests$cor$p.vals, method = "fdr") < 0.15))
selected
length(setdiff(selected, nonnulls)) / length(selected)
nonnulls
selected <- unique(which(p.adjust(tests$fisher$p.vals, method = "fdr") < 0.15))
nonnulls
selected <- unique(which(p.adjust(tests$fisher$p.vals, method = "fdr") < 0.15))
length(setdiff(selected, nonnulls)) / length(selected)
cor(tree$snps[1,], tree$snps[2,])
cor(tree$snps[1,], tree$snps[3,])
cor(tree$snps[1,], tree$snps[4,])
cor(tree$snps[1,], tree$snps[5,])
cor(tree$snps[1,], tree$snps[10,])
cor(tree$snps[1,], tree$snps[11,])
cor(tree$snps[1,], tree$snps[20,])
cor(tree$snps[1,], tree$snps[21,])
cor(tree$snps[1,], tree$snps[210,])
cor(tree$snps[1,], tree$snps[99,])
cor(tree$snps[1,], tree$snps[98,])
sample <- rnorm(1000)
cor(sample[1], sample[2])
x <- sample
y <- sample + rnorm(1000)
cor(c(x[1], y[1]), c(x[2], y[2]))
cor(c(x[1], y[1]), c(x[3], y[3]))
cor(c(x[1], y[1]), c(x[3], y[4]))
cor(c(x[1], y[1]), c(x[4], y[4]))
cor(c(x[1], y[1]), c(x[5], y[5]))
power <- function(selected, nonnulls) {
false_negatives <- setdiff(nonnulls, selected)
n_nonnulls <- length(nonnulls)
return((n_nonnulls - false_negatives) / n_nonnulls)
}
power(selected, nonnulls)
power <- function(selected, nonnulls) {
false_negatives <- setdiff(nonnulls, selected)
n_nonnulls <- length(nonnulls)
return((n_nonnulls - length(false_negatives)) / n_nonnulls)
}
power(selected, nonnulls)
fdp(selected, nonnulls)
fdp <- function(selected, nonnulls) {
false_positives <- setdiff(selected, nonnulls)
n_selected <- length(selected)
if (n_selected == 0) {
return(0)
} else {
return(length(false_positives) / n_selected)
}
}
fdp(selected, nonnulls)
cum.dist(0.3)
hist(tests$terminal$corr.sim)
hist(tests$subsequent$corr.sim)
hist(tests$simultaneous$corr.sim)
hist(tests$fisher$corr.sim)
hist(tests$cor$corr.sim)
hist(tests$cor$corr.dat)
hist(tests$fisher$corr.dat)
tests$fisher$corr.dat[nonnulls]
fisher.cum ecdf(tests$fisher$corr.sim)
fisher.cum <- ecdf(tests$fisher$corr.sim)
fisher.cum(0.1)
fisher.cum(c(0.1,0.2))
fisher.cum(tests$fisher$corr.dat)
hist(tests$fisher$corr.sim)
hist(tests$cor$corr.sim)
hist(tests$cor$corr.dat)
hist(abs(tests$cor$corr.dat))
hist(abs(tests$cor$corr.sim))
